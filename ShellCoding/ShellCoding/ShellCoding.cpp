#include <stdlib.h>
#include <stdint.h>
#include <stdio.h>
#include <Windows.h>
#include <io.h>
#include "shellcode.h"

int main()
{
    setvbuf(stdout, NULL, _IONBF, 0);
    setvbuf(stdin, NULL, _IONBF, 0);
    LPVOID lpvPayload = VirtualAlloc(NULL, 0x1000, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    printf("[+] VirtualAlloc RWX memory for shellcode: 0x%p\n", lpvPayload);
    //memcpy(lpvPayload, ShellCode, sizeof(ShellCode));
    //memcpy(lpvPayload, ShellCode_CreateProcessA, sizeof(ShellCode_CreateProcessA));
    //memcpy(lpvPayload, ShellCode_GetCommandLineA, sizeof(ShellCode_GetCommandLineA));
    memcpy(lpvPayload, ShellCode_WinExec, sizeof(ShellCode_WinExec));

    printf("[+] Success to create shellcode\n");

    ((void(*)())lpvPayload)();

    /*
     * ShellCode_CreateProcessA should act like below:
    

    STARTUPINFO si = { sizeof(STARTUPINFO) };
    PROCESS_INFORMATION pi;
    const char calc[] = "calc";
    CreateProcessA(NULL, (LPSTR)calc, NULL, NULL, FALSE, NULL, NULL, NULL, (LPSTARTUPINFOA)&si, &pi);
    printf("%s\n", GetCommandLineA());
     */
    return 0;
}
