#include <stdio.h>
#include <Windows.h>
#include <tlhelp32.h>


DWORD getProcessId(const char* processName) {
    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (hSnapshot) {
        PROCESSENTRY32 entry;
        entry.dwSize = sizeof(PROCESSENTRY32);
        if (Process32First(hSnapshot, &entry)) {
            do {
                if (!strcmp((const char*)entry.szExeFile, processName)) {
                    return entry.th32ProcessID;
                }
            } while (Process32Next(hSnapshot, &entry));
        }
    }
    else {
        return 0;
    }
}

DWORD getThreadId(DWORD pid)
{
	HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);
	if (hSnapshot == INVALID_HANDLE_VALUE)
	{
        exit(1);
	}

	HANDLE hThread;
	THREADENTRY32 te32;
	te32.dwSize = sizeof(te32);

	if (!Thread32First(hSnapshot, &te32))
	{
        exit(1);
	}

	BOOL found_thread = FALSE;
	while (Thread32Next(hSnapshot, &te32))
	{
		if (te32.th32OwnerProcessID == pid)
		{
			printf("[+] Found thread in target process\r\n");
			found_thread = TRUE;
			break;
		}
	}

	CloseHandle(hSnapshot);
	if (found_thread)
	{
		return te32.th32ThreadID;
	}
	else
	{
		printf("[-] Couldn't find thread, exiting...\r\n");
		ExitProcess(-1);
	}

}


int main(int argc, char* argv[]) {

    /*
    if (argc != 2) {
        printf("Cannot find require parameters\n");
        printf("Usage: injector.exe <process name>\n");
        exit(0);
    }
    LPCSTR processName = argv[1];
    */
    LPCSTR processName = "Calculator.exe";

    /*
    DWORD processId = getProcessId(processName);
    if (!processId) {
        printf("[x] Cannot find process %s\n", processName);
        exit(1);
    }
    printf("[*] Found process %s(PID = %d)\n", processName, processId);
    */
    DWORD processId = 1652;

    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, false, processId);
    if (hProcess == NULL) {
        printf("[x] Cannot open process with id %d\n", processId);
        exit(1);
    }
    DWORD threadId = getThreadId(processId);
    printf("[*] Found thread (TID = %d)\n", threadId);
    HANDLE hThread = OpenThread(THREAD_ALL_ACCESS, FALSE, threadId);

}
